import React, { useEffect, useState } from "react";
import Help from '../components/Help';
import '../style/HomeStyle.css';
import Axios from "axios";

function Home({ setIsAuthenticated }) {
  const [user, setUser] = useState(null);
  const [helpOpen, setHelpOpen] = useState(false);

  // üî• –ù–æ–≤–∏ —Å—ä—Å—Ç–æ—è–Ω–∏—è
  const [visitedPlaces, setVisitedPlaces] = useState([]);
  const [topUsers, setTopUsers] = useState([]);
  const [foundInTop , setFoundInTop ] = useState(false);
  const [geminiSuggestion, setGeminiSuggestion] = useState("–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...");
  const [geminiCitat, setGeminiCitat] = useState("–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...");

  const host = process.env.REACT_APP_HOST;
  const port = process.env.REACT_APP_PORT;

  useEffect(() => {
    const userSession = localStorage.getItem("userSession");
    if (userSession) {
      setUser(JSON.parse(userSession));
    }
  }, []);

  useEffect(() => {
    if (user?.firstLogin) {
      setHelpOpen(true);

      const fetchData = async () => {
        try {
          await Axios.put(`http://${host}:${port}/users/updateField`, {
            id: user.id,
            field: "firstLogin",
            newValue: false,
          });
          user.firstLogin = false;
          localStorage.setItem("userSession", JSON.stringify(user));
        } catch (error) {
          console.error("Error updating user field:", error);
        }
      };

      fetchData();
    }

    if (user) {
      fetchPlaces();
      fetchTopUsers();
      askGemini();
      getCitat();
    }
  }, [user, host, port]);

  const fetchTopUsers = async () => {
    try {
      const response = await Axios.get(`http://${host}:${port}/users/getTopUsers`);
      
      if (response.data.success) {
        let topUsers = response.data.topUsers;
        console.log("topUsers: ", topUsers);
        let foundInTop = false;
  
        console.log("user: ", user);
        topUsers.forEach((u, i) => {
          if (u._id === user.id) {
            console.log('u._id === user._id: ', u._id === user._id);
            topUsers[i] = {
              ...u,
              me: true
            };
            foundInTop = true;
          }
        });
  
        console.log('topUsers 2: ', topUsers);
        console.log('foundInTop 2: ', foundInTop);
        setTopUsers(topUsers);
        setFoundInTop(foundInTop);
  
      } else {
        console.error("Failed to fetch top users");
      }
    } catch (error) {
      console.error("Error fetching top users:", error);
    }
  };
  

  const getCitat = async () => {
    try {
      const prompt = "–î–∞–π –º–∏ —Ü–∏—Ç–∞—Ç –∑–∞ –¥–µ–Ω—è, —Å–≤—ä—Ä–∑–∞–Ω —Å –∫—Ä–∞—Å–æ—Ç–∞—Ç–∞ –Ω–∞ –±—ä–ª–≥–∞—Ä–∏—è –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ç–µ —ù –¥–µ—Å—Ç–∏–Ω–∞—Ü–∏–∏. –ù–æ –±–µ–∑ –æ–±—è—Å–Ω–µ–Ω–∏—è, —Å–∞–º–æ —Ü–∏—Ç–∞—Ç, –∑–∞—â–æ—Ç–æ –≥–æ –ø–æ–ª–∑–≤–∞–º –¥–∞ –≥–æ –ø–æ–∫–∞–∑–≤–∞–º –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏!";

      const res = await Axios.post(`http://${host}:${port}/google/gemini`, { prompt });
      console.log("response from gemini: ", res);
      if (res.data.response) {
        setGeminiCitat(res.data.response);
      } else {
        //setError("–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç –º–æ–¥–µ–ª–∞.");
        console.error("–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç –º–æ–¥–µ–ª–∞.");
      }
    } catch (error) {
      //setError("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º Gemini.");
      console.error(error);
    } finally {
      //setLoading(false);
    }
  }

  function getCurrentSeason() {
    const today = new Date();
    const month = today.getMonth() + 1; // –ú–µ—Å–µ—Ü–∏ —Å–µ –±—Ä–æ—è—Ç –æ—Ç 0 –¥–æ 11, –∑–∞—Ç–æ–≤–∞ –¥–æ–±–∞–≤—è–º–µ 1
    const day = today.getDate();
  
    if ((month === 3 && day >= 21) || (month > 3 && month < 6) || (month === 6 && day <= 20)) {
      return '–ü—Ä–æ–ª–µ—Ç';
    } else if ((month === 6 && day >= 21) || (month > 6 && month < 9) || (month === 9 && day <= 20)) {
      return '–õ—è—Ç–æ';
    } else if ((month === 9 && day >= 21) || (month > 9 && month < 12) || (month === 12 && day <= 20)) {
      return '–ï—Å–µ–Ω';
    } else {
      return '–ó–∏–º–∞';
    }
  }

  const askGemini = async () => {
    try {
      const prompt = "–ò–°–ö–ê–ú –†–ê–ó–õ–ò–ß–ù–ò –î–ï–°–¢–ò–ù–ê–¶–ò–ò, –¢–ò –î–ò –î–ê–í–ê–® –ï–î–ù–û –ò –°–™–©–û, –ü–†–ï–°–¢–ê–ù–ò –ë–ï! –°–¢–ò–ì–ê –° –¢–û–í –ê–°–ï–õ–û –ö–û–í–ê–ß–ï–í–ò–¶–ê, –î–ê–ô –ú–ò –ù–ï–©–û –î–†–£–ì–û, –ù–ï –ï –î–ù–û –ò –°–™–©–û... –ö–æ–µ –µ –Ω–∞–π-—Ö—É–±–∞–≤–æ—Ç–æ –º—è—Å—Ç–æ –≤ –ë—ä–ª–≥–∞—Ä–∏—è, –∫–æ–µ—Ç–æ –¥–∞ –ø–æ—Å–µ—Ç—è –ø—Ä–µ–∑ "+ getCurrentSeason() +"? –ò—Å–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º—è—Å—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—â–æ –¥–∞ –ø–æ—Å–µ—Ç—è –Ω–µ–≥–æ. –ú–∞–∫—Å–∏–º—É–º 4-5 –∏–∑—Ä–µ—á–µ–Ω–∏—è! –ú–æ–∂–µ—à –¥–∞ –¥–∞–≤–∞—à –∏–¥–µ–∏ –æ—Ç —Ü—è–ª–∞ –ë—ä–ª–≥–∞—Ä–∏—è, –¥–æ—Ä–∏ –¥–∞ —Å–µ —Ñ–æ–∫—É—Å–∏—Ä–∞—à –≤—ä—Ä—É –ø–æ—á—Ç–∏ –∑–∞–±—Ä–∞–≤–µ–Ω–∏ –¥–µ—Å—Ç–∏–Ω–∞—Ü–∏–∏, –∑–∞ –¥–∞ —Å–µ –ø–æ–ø—É–ª–∏–∑–∏—Ä–∞—Ç –ø–∞–∫! –°–™–©–û –¢–ê–ö–ê –û–¢–ì–û–í–û–†–ê –¢–ò –ì–û –°–õ–ê–ì–ê–ú –ù–ê –°–¢–†–ê–ù–ò–¶–ê, –ë–ï–ó –ò–ó–í–ò–ù–ï–ù–ò–Ø, –ë–ï–ó –ù–ò–©–û, –ü–†–û–°–¢–û –£–í–ê–ñ–ò–¢–ï–õ–ï–ù –û–¢–ì–û–í–û–†, –ö–ê–¢–û –ó–ê –ü–û–¢–†–ï–ë–ò–¢–ï–õ–ò, –ú–û–õ–Ø!";

      const res = await Axios.post(`http://${host}:${port}/google/gemini`, { prompt });
      console.log("response from gemini: ", res);
      if (res.data.response) {
        setGeminiSuggestion(res.data.response);
      } else {
        //setError("–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç –º–æ–¥–µ–ª–∞.");
        console.error("–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç –º–æ–¥–µ–ª–∞.");
      }
    } catch (error) {
      //setError("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º Gemini.");
      console.error(error);
    } finally {
      //setLoading(false);
    }
  }

  const fetchPlaces = async () => {
    const response = await Axios.get("http://"+host+":"+port+"/places/getUserPlaces", {
      params: { userId: user.id, visited: true }
    });
    
    setVisitedPlaces(response.data.sort((a, b) => new Date(b.dateOfVisit) - new Date(a.dateOfVisit)));
  }

  const formatDate = (date) => {
    const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
    return new Date(date).toLocaleDateString('bg-BG', options);
  };

  return (
    <div className="home-container">
      {helpOpen && (
        <div className="help-modal-overlay" onClick={() => setHelpOpen(false)}>
          <div className="help-modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>–ü–æ–º–æ—â –∏ –ß–µ—Å—Ç–æ –ó–∞–¥–∞–≤–∞–Ω–∏ –í—ä–ø—Ä–æ—Å–∏</h2>
              <button className="close-button" onClick={() => setHelpOpen(false)}>‚úï</button>
            </div>
            <Help />
          </div>
        </div>
      )}

      <center>
        <h1>–î–æ–±—Ä–µ –¥–æ—à–ª–∏, {user?.name ? user?.name : "–≥–æ—Å—Ç"}!</h1>
      </center>

      <center>
        <p>{geminiCitat}</p>
      </center>

      {/* üí° –ù–æ–≤–∞—Ç–∞ —á–∞—Å—Ç */}
      <div className="home-content">
        <section className="visited-places">
          <h2>–ü–æ—Å–µ—Ç–µ–Ω–∏ –º–µ—Å—Ç–∞</h2>
          <div className="visited-places-list">
            {visitedPlaces.map((place, idx) => (
              <div className="visited-place-item" key={idx}>
                <div className="visited-place-name">{place.name}</div>
                <div className="visited-place-date">{formatDate(place.dateOfVisit)}</div>
              </div>
            ))}
          </div>
        </section>

        <aside className="right-widgets">
          <div className="points-widget">
            <h3>–í–∞—à–∏—Ç–µ —Ç–æ—á–∫–∏: {user?.points ?? 0}</h3>
            <h4>–ö–ª–∞—Å–∞—Ü–∏—è</h4>
            <ol>
              {topUsers.map((u, idx) => (
                <li key={idx}>
                  {u.me ? (
                    <b>{u.name} ‚Äî {u.points} —Ç.</b>
                  ) : (
                    `${u.name} ‚Äî ${u.points} —Ç.`
                  )}
                </li>
              ))}
            </ol>
            {!foundInTop && <p><b>{user?.name} ‚Äî {user?.points} —Ç.</b></p>}
          </div>

          <div className="gemini-widget">
            <h4>Gemini –ë–æ—Ç: –ü—Ä–µ–ø–æ—Ä—ä–∫–∞</h4>
            <p>{geminiSuggestion}</p>
          </div>
        </aside>
      </div>
    </div>
  );
}

export default Home;
